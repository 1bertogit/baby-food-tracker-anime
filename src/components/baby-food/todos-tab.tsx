import { useToast } from '../toast-notification';
import { LoadingButton } from '../loading-spinner';
import React, { useState } from 'react';
import { CheckSquare, Plus, Clock, AlertCircle, Trash2, Check } from 'lucide-react';
import { useBabyFoodStore } from '../../store/baby-food-store';
import type { Todo } from '../../lib/types';

export const TodosTab: React.FC = () => {
  const { 
    currentDay, 
    todos, 
    addTodo: addTodoToStore, 
    toggleTodo: toggleTodoInStore, 
    deleteTodo: deleteTodoFromStore 
  } = useBabyFoodStore();
  const toast = useToast();
  const [isLoading, setIsLoading] = useState(false);
  const [newTodo, setNewTodo] = useState('');

  const addTodo = async () => {
    if (!newTodo.trim()) return;
    
    setIsLoading(true);
    
    // Simular delay de API
    await new Promise(resolve => setTimeout(resolve, 500));
    
    const todo: Todo = {
      id: Date.now().toString(),
      title: newTodo,
      completed: false,
      priority: 'medium',
      category: 'custom',
      isAutoGenerated: false,
      createdAt: new Date().toISOString()
    };
    
    addTodoToStore(todo);
    toast.success('Tarefa adicionada!', 'Nova tarefa criada com sucesso');
    setNewTodo('');
    setIsLoading(false);
  };

  const toggleTodo = (id: string) => {
    toggleTodoInStore(id);
  };

  const deleteTodo = (id: string) => {
    deleteTodoFromStore(id);
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'high': return 'border-red-200 bg-red-50 text-red-800';
      case 'medium': return 'border-yellow-200 bg-yellow-50 text-yellow-800';
      case 'low': return 'border-green-200 bg-green-50 text-green-800';
      default: return 'border-gray-200 bg-gray-50 text-gray-800';
    }
  };

  const getCategoryIcon = (category: string) => {
    switch (category) {
      case 'feeding': return 'üçº';
      case 'health': return 'üíä';
      case 'shopping': return 'üõí';
      case 'preparation': return 'üë®‚Äçüç≥';
      case 'observation': return 'üëÄ';
      default: return 'üìù';
    }
  };

  const pendingTodos = todos.filter(t => !t.completed);
  const completedTodos = todos.filter(t => t.completed);

  return (
    <div className="space-y-6">
      <toast.ToastContainer />
      
      {/* Header com estat√≠sticas */}
      <div className="bg-white rounded-2xl shadow-lg p-6 border border-purple-100">
        <div className="flex items-center justify-between mb-4">
          <h3 className="font-semibold text-gray-800 flex items-center">
            <CheckSquare className="h-5 w-5 mr-2 text-purple-500" />
            Lista de Tarefas - Dia {currentDay}
          </h3>
          <div className="flex space-x-4 text-sm">
            <span className="bg-purple-100 text-purple-700 px-3 py-1 rounded-full">
              {pendingTodos.length} pendentes
            </span>
            <span className="bg-green-100 text-green-700 px-3 py-1 rounded-full">
              {completedTodos.length} conclu√≠das
            </span>
          </div>
        </div>

        {/* Adicionar nova tarefa */}
        <div className="flex space-x-2">
          <input
            type="text"
            value={newTodo}
            onChange={(e) => setNewTodo(e.target.value)}
            placeholder="Adicionar nova tarefa..."
            className="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
            onKeyPress={(e) => e.key === 'Enter' && addTodo()}
          />
          <LoadingButton
            loading={isLoading}
            onClick={addTodo}
            className="bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 transition-colors flex items-center"
          >
            <Plus className="h-4 w-4 mr-1" />
            Adicionar
          </LoadingButton>
        </div>
      </div>

      {/* Tarefas Pendentes */}
      {pendingTodos.length > 0 && (
        <div className="bg-white rounded-2xl shadow-lg p-6 border border-orange-100">
          <h4 className="font-semibold text-gray-800 mb-4 flex items-center">
            <AlertCircle className="h-5 w-5 mr-2 text-orange-500" />
            Tarefas Pendentes
          </h4>
          <div className="space-y-3">
            {pendingTodos.map((todo) => (
              <div key={todo.id} className="flex items-start space-x-3 p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
                <LoadingButton
                  loading={false}
                  onClick={() => toggleTodo(todo.id)}
                  className="mt-1 w-5 h-5 border-2 border-gray-300 rounded hover:border-purple-500 transition-colors"
                >
                  <span></span>
                </LoadingButton>
                <div className="flex-1">
                  <div className="flex items-center space-x-2 mb-1">
                    <span className="text-lg">{getCategoryIcon(todo.category)}</span>
                    <h5 className="font-medium text-gray-800">{todo.title}</h5>
                    {todo.dueTime && (
                      <span className="flex items-center text-sm text-gray-500">
                        <Clock className="h-3 w-3 mr-1" />
                        {todo.dueTime}
                      </span>
                    )}
                    <span className={`px-2 py-1 rounded-full text-xs font-medium ${getPriorityColor(todo.priority)}`}>
                      {todo.priority}
                    </span>
                  </div>
                  {todo.description && (
                    <p className="text-sm text-gray-600">{todo.description}</p>
                  )}
                  {todo.isAutoGenerated && (
                    <span className="text-xs text-blue-600 bg-blue-100 px-2 py-1 rounded-full mt-2 inline-block">
                      Autom√°tico
                    </span>
                  )}
                </div>
                {!todo.isAutoGenerated && (
                  <LoadingButton
                    loading={false}
                    onClick={() => deleteTodo(todo.id)}
                    className="text-red-500 hover:text-red-700 transition-colors"
                  >
                    <Trash2 className="h-4 w-4" />
                  </LoadingButton>
                )}
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Tarefas Conclu√≠das */}
      {completedTodos.length > 0 && (
        <div className="bg-white rounded-2xl shadow-lg p-6 border border-green-100">
          <h4 className="font-semibold text-gray-800 mb-4 flex items-center">
            <CheckSquare className="h-5 w-5 mr-2 text-green-500" />
            Tarefas Conclu√≠das
          </h4>
          <div className="space-y-3">
            {completedTodos.map((todo) => (
              <div key={todo.id} className="flex items-start space-x-3 p-4 border border-gray-200 rounded-lg bg-gray-50 opacity-75">
                <LoadingButton
                  loading={false}
                  onClick={() => toggleTodo(todo.id)}
                  className="mt-1 w-5 h-5 bg-green-500 border-2 border-green-500 rounded flex items-center justify-center"
                >
                  <Check className="h-3 w-3 text-white" />
                </LoadingButton>
                <div className="flex-1">
                  <div className="flex items-center space-x-2 mb-1">
                    <span className="text-lg">{getCategoryIcon(todo.category)}</span>
                    <h5 className="font-medium text-gray-600 line-through">{todo.title}</h5>
                  </div>
                  {todo.description && (
                    <p className="text-sm text-gray-500 line-through">{todo.description}</p>
                  )}
                </div>
                {!todo.isAutoGenerated && (
                  <LoadingButton
                    loading={false}
                    onClick={() => deleteTodo(todo.id)}
                    className="text-red-500 hover:text-red-700 transition-colors"
                  >
                    <Trash2 className="h-4 w-4" />
                  </LoadingButton>
                )}
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Dicas de uso */}
      <div className="bg-blue-50 border border-blue-200 rounded-xl p-4">
        <h4 className="font-semibold text-blue-800 mb-2">üí° Dicas de Uso</h4>
        <ul className="text-sm text-blue-700 space-y-1">
          <li>‚Ä¢ Tarefas autom√°ticas s√£o geradas baseadas no cronograma do dia</li>
          <li>‚Ä¢ Adicione tarefas personalizadas como compras ou prepara√ß√µes</li>
          <li>‚Ä¢ Use as prioridades para organizar seu dia</li>
          <li>‚Ä¢ Tarefas conclu√≠das ficam salvas para refer√™ncia</li>
        </ul>
      </div>
    </div>
  );
};